name: Deploy api-server

on: workflow_dispatch

permissions: write-all

jobs:
  deploy-api-server:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-southeast-1
      AWS_ECR_REPOSITORY: 692859917522.dkr.ecr.ap-southeast-1.amazonaws.com
      CLUSTER: nettiwork
      SERVICE: api-server

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: yarn
          cache-dependency-path: ./api-server/yarn.lock
      
      - name: Install @nettiwork/common dependencies
        working-directory: ./@nettiwork/common
        run: yarn && yarn build
      
      - name: Install api-server dependencies
        working-directory: ./api-server
        run: yarn
      
      - name: Copy @nettiwork to tmp
        working-directory: ./api-server
        run: |
          rm -rf ./tmp
          mkdir ./tmp
          cp -a ./../@nettiwork ./tmp/
      
      - name: Login with AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY

      - name: Build docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api-server
          push: true
          tags: ${{ env.AWS_ECR_REPOSITORY }}/${{ env.SERVICE }}:latest
      
      - name: Scan api-server
        uses: aquasecurity/trivy-action@0.28.0
        with:
          exit-code: 1
          scan-type: "image"
          image-ref: ${{ env.AWS_ECR_REPOSITORY }}/${{ env.SERVICE }}:latest
          severity: "CRITICAL,HIGH"

      - name: Push image to AWS ECR
        run: docker push $AWS_ECR_REPOSITORY/$SERVICE:latest
      
      - name: Update ecs service
        run: aws ecs update-service --service api-server --cluster $CLUSTER --force-new-deployment
